// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package httpserver

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE34310f8DecodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver(in *jlexer.Lexer, out *httpError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Code":
			out.Code = int(in.Int())
		case "Body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE34310f8EncodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver(out *jwriter.Writer, in httpError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"Body\":"
		out.RawString(prefix)
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v httpError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE34310f8EncodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v httpError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE34310f8EncodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *httpError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE34310f8DecodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *httpError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE34310f8DecodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver(l, v)
}
func easyjsonE34310f8DecodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver1(in *jlexer.Lexer, out *errorProcessor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE34310f8EncodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver1(out *jwriter.Writer, in errorProcessor) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v errorProcessor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE34310f8EncodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v errorProcessor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE34310f8EncodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *errorProcessor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE34310f8DecodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *errorProcessor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE34310f8DecodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver1(l, v)
}
func easyjsonE34310f8DecodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver2(in *jlexer.Lexer, out *ErrorBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			out.Data = string(in.String())
		case "error":
			out.Error = bool(in.Bool())
		case "errorText":
			out.ErrorText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE34310f8EncodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver2(out *jwriter.Writer, in ErrorBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.Bool(bool(in.Error))
	}
	{
		const prefix string = ",\"errorText\":"
		out.RawString(prefix)
		out.String(string(in.ErrorText))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE34310f8EncodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE34310f8EncodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE34310f8DecodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE34310f8DecodeGitWildberriesRuPortalsAnalyticsBackPkgHttpserver2(l, v)
}
